--- 
commands: 
  destroy-environment: 
    description: "Destroy back-end and front-end cloudformation stacks given a workflow ID."
    steps: 
      - 
        run: 
          command: |
              aws s3 rm --recursive s3://udapeople-<< pipeline.parameters.workflow-id >>
              aws cloudformation delete-stack \
                --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>"
              aws cloudformation delete-stack \
                --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>"
          name: "Destroy environments"
          when: on_fail
  revert-migrations: 
    description: "Revert the last migration if successfully run in the current workflow."
    steps: 
      - 
        run: 
          command: |
              # Curl command here to see if there was a successful migration associated with the workflow id, store result in SUCCESS variable
              export SUCCESS=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID})
              if(( $SUCCESS==1 )); 
              then
                cd ~/project/backend
                npm install
                npm run migrations:revert
              fi
          name: "Revert migrations"
          when: on_fail
jobs: 
  build-backend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - backend-build
      - 
        run: 
          command: |
              cd backend
              npm i
              npm run build
          name: "Back-end build"
      - 
        save_cache: 
          key: backend-build
          paths: 
            - backend/node_modules
      - 
        save_cache: 
          key: backend-dist
          paths: 
            - backend/dist
      - 
        slack/notify: 
          event: fail
          template: basic_fail_1
  build-frontend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - frontend-build
      - 
        run: 
          command: |
              cd frontend
              sudo npm install webpack-dev-server -g
              sudo npm install
              sudo npm run build
          name: "Build front-end"
      - 
        save_cache: 
          key: frontend-build
          paths: 
            - frontend/node_modules
      - 
        slack/notify: 
          event: fail
          template: basic_fail_1
  cleanup: 
    docker: 
      - 
        image: "cimg/base:2020.01"
    steps: 
      - checkout
      - aws-cli/setup
      - 
        run: 
          command: |
              export OldWorkflowID=$(curl -H "token: << pipeline.parameters.memstash-token >>" --request GET https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID})
              echo "Old Workflow ID: ${OldWorkflowID}"
              
              if [ "${OldWorkflowID}" != "<< pipeline.parameters.workflow-id >>" ]
              then
                aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
                aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
                aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
              fi
          name: "Remove old stacks and files"
  cloudfront-update: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        run: 
          command: |
              apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli
              apk add --update curl
          name: "Install dependencies"
      - 
        run: 
          command: |
              export OldWorkflowID=$(aws cloudformation list-exports \
                --query "Exports[?Name==\`WorkflowID\`].Value" \
                --no-paginate --output text)
              
              echo "Old Workflow ID: ${OldWorkflowID}"
              
              curl -H "Content-Type: text/plain" \
                -H "token: << pipeline.parameters.memstash-token >>" \
                --request PUT --data $OldWorkflowID \
                https://api.memstash.io/values/old_workflow_id_${CIRCLE_WORKFLOW_ID}
          name: "Save old workflow ID"
      - 
        run: 
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/cloudfront.yml \
                --stack-name "udapeople-cloudfront" \
                --parameter-overrides WorkflowID="<< pipeline.parameters.workflow-id >>" \
                --tags project=udapeople
          name: "Update cloudfront distribution"
      - revert-migrations
      - destroy-environment
  configure-infrastructure: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        add_ssh_keys: 
          fingerprints: 
            - "9a:02:61:b5:1b:ea:b5:aa:02:78:9e:e5:80:f3:7c:1a"
      - 
        attach_workspace: 
          at: ~/
      - 
        run: 
          command: |
              apk add --update ansible
              cat .circleci/ansible/inventory.txt
          name: "Install dependencies"
      - 
        run: 
          command: |
              echo ENVIRONMENT=production > "backend/.env"
              
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo NODE_ENV=production >> "backend/.env"
              
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              
              ansible-playbook \
                -i .circleci/ansible/inventory.txt \
                .circleci/ansible/configure-server.yml
          name: "Configure server"
      - 
        run: 
          command: "apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli\n"
          name: "Install AWS CLI for rollback"
          when: on_fail
      - destroy-environment
  deploy-backend: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        add_ssh_keys: 
          fingerprints: 
            - "9a:02:61:b5:1b:ea:b5:aa:02:78:9e:e5:80:f3:7c:1a"
      - 
        attach_workspace: 
          at: ~/
      - 
        run: 
          command: "apk add --update ansible openssh-client tar gzip \n"
          name: "Install dependencies"
      - 
        restore_cache: 
          keys: 
            - backend-dist
      - 
        run: 
          command: |
              cd /home
              tar czf backend.tar.gz -P /home/circleci/project/backend/dist
          name: "Deploy backend"
      - 
        run: 
          command: |
              export ANSIBLE_HOST_KEY_CHECKING=False
              ansible-playbook \
                -i .circleci/ansible/inventory.txt \
                .circleci/ansible/deploy-backend.yml
          name: "Deploy backend 2"
      - 
        run: 
          command: "apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli\n"
          name: "Install AWS CLI for rollback"
          when: on_fail
      - revert-migrations
      - destroy-environment
  deploy-frontend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        attach_workspace: 
          at: ~/
      - 
        run: 
          command: |
              cd frontend
              sudo npm install webpack-dev-server -g
              sudo npm install
          name: "Install dependencies"
      - 
        run: 
          command: |
              export BACKEND_IP=$(sed -n 2p .circleci/ansible/inventory.txt)
              export API_URL="http://${BACKEND_IP}:3030"
              
              echo ENVIRONMENT=production > "frontend/.env"
              echo NODE_ENV=production >> "frontend/.env"
              echo API_URL=$API_URL >> "frontend/.env"
              
              echo $API_URL
          name: "Get backend url"
      - 
        run: 
          command: |
              cd frontend
              ls -la
              cat .env
              npm run build
          name: "Build frontend"
      - aws-cli/setup
      - 
        run: 
          command: "aws s3 cp --recursive frontend/dist \"s3://udapeople-<< pipeline.parameters.workflow-id >>\"\n"
          name: "Deploy frontend objects"
      - revert-migrations
      - destroy-environment
  deploy-infrastructure: 
    docker: 
      - 
        image: "cimg/base:2020.01"
    steps: 
      - checkout
      - aws-cli/setup
      - 
        run: 
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/backend.yml \
                --stack-name "udapeople-backend-<< pipeline.parameters.workflow-id >>" \
                --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
                --tags project=udapeople
          name: "Ensure back-end infrastructure exists"
      - 
        run: 
          command: |
              aws cloudformation deploy \
                --template-file .circleci/files/frontend.yml \
                --stack-name "udapeople-frontend-<< pipeline.parameters.workflow-id >>" \
                --parameter-overrides ID="<< pipeline.parameters.workflow-id >>" \
                --tags project=udapeople
          name: "Ensure front-end infrastructure exist"
      - 
        run: 
          command: |
              aws ec2 describe-instances \
                --query 'Reservations[*].Instances[*].PublicIpAddress' \
                --filters "Name=tag:project,Values=udapeople" \
                --output text >> .circleci/ansible/inventory.txt
              cat .circleci/ansible/inventory.txt
          name: "Add back-end ip to ansible inventory"
      - 
        persist_to_workspace: 
          paths: 
            - project/.circleci/ansible/inventory.txt
          root: ~/
      - destroy-environment
  run-migrations: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - aws-cli/setup
      - 
        run: 
          command: |
              echo ENVIRONMENT=production > "backend/.env"
              
              echo TYPEORM_CONNECTION=postgres >> "backend/.env"
              echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
              echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
              echo NODE_ENV=production >> "backend/.env"
              
              echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
              echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
              echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
              echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
              echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
              # ---
              cd backend
              sudo npm install
              # npm audit fix --audit-level=critical --force
              # sudo npm run build
              sudo npm run migrations > migration.log
              cat migration.log
              migration_status=$(cat migration.log | grep -c "has been executed successfully")
              if [ $migration_status > 0 ]; then exit 0; else exit 1; fi;
          name: "Run migrations"
      - 
        run: 
          command: |
              curl -H "Content-Type: text/plain" \
                -H "token: << pipeline.parameters.memstash-token >>" \
                --request PUT --data "1" \
                https://api.memstash.io/values/migration_${CIRCLE_WORKFLOW_ID}
          name: "Send migration results to memstash"
      - revert-migrations
      - destroy-environment
  scan-backend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - backend-build
      - 
        run: 
          command: |
              cd backend
              npm audit --audit-level=critical
          name: "Back-end security scan"
      - 
        slack/notify: 
          event: fail
          template: basic_fail_1
      - 
        slack/notify: 
          event: pass
          template: success_tagged_deploy_1
  scan-frontend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - frontend-build
      - 
        run: 
          command: |
              cd frontend
              npm audit --audit-level=critical
          name: "Font-end security scan"
      - 
        slack/notify: 
          event: fail
          template: basic_fail_1
      - 
        slack/notify: 
          event: pass
          template: success_tagged_deploy_1
  smoke-test: 
    docker: 
      - 
        image: "python:3.7-alpine3.11"
    steps: 
      - checkout
      - 
        run: 
          command: "apk add --update curl\n"
          name: "Install dependencies"
      - 
        attach_workspace: 
          at: ~/
      - 
        run: 
          command: "export BACKEND_URL=$(sed -n 2p .circleci/ansible/inventory.txt)\n"
          name: "Get backend url"
      - 
        run: 
          command: |
              if curl -s https://${BACKEND_URL}:3030/api/status
              then
              return 1
              else
              return 0
              fi
          name: "Backend smoke test."
      - 
        run: 
          command: |
              URL="http://udapeople-<< pipeline.parameters.workflow-id >>.s3-website-eu-west-3.amazonaws.com"
              echo $URL
              
              if curl -s ${URL} | grep "Welcome"
              then
              return 1
              else
              return 0
              fi
          name: "Frontend smoke test."
      - 
        run: 
          command: "apk add --update py3-pip && pip3 install --upgrade pip && pip3 install awscli\n"
          name: "Install AWS CLI for rollback"
          when: on_fail
      - revert-migrations
      - destroy-environment
  test-backend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - backend-build
      - 
        run: 
          command: |
              cd backend
              npm run test
          name: "Back-end test"
      - 
        slack/notify: 
          event: fail
          template: basic_fail_1
  test-frontend: 
    docker: 
      - 
        image: "circleci/node:13.8.0"
    steps: 
      - checkout
      - 
        restore_cache: 
          keys: 
            - frontend-build
      - 
        run: 
          command: |
              cd frontend
              npm run test
          name: "Font-end test"
      - 
        slack/notify: 
          event: fail
          template: basic_fail_1
orbs: 
  aws-cli: circleci/aws-cli@1.3.0
  slack: circleci/slack@4.1.1
parameters: 
  memstash-token: 
    default: b9461c43-6888-4d04-8e76-7beeddbb863c
    type: string
  workflow-id: 
    default: "${CIRCLE_WORKFLOW_ID:0:7}"
    type: string
version: 2.1
workflows: 
  default: 
    jobs: 
      - build-frontend
      - build-backend
      - 
        test-frontend: 
          requires: 
            - build-frontend
      - 
        test-backend: 
          requires: 
            - build-backend
      - 
        scan-frontend: 
          requires: 
            - build-frontend
      - 
        scan-backend: 
          requires: 
            - build-backend
      - 
        deploy-infrastructure: 
          filters: 
            branches: 
              only: 
                - main
          requires: 
            - test-frontend
            - test-backend
            - scan-frontend
            - scan-backend
      - 
        configure-infrastructure: 
          requires: 
            - deploy-infrastructure
      - 
        run-migrations: 
          requires: 
            - configure-infrastructure
      - 
        deploy-backend: 
          requires: 
            - run-migrations
      - 
        deploy-frontend: 
          requires: 
            - run-migrations
      - 
        smoke-test: 
          requires: 
            - deploy-backend
            - deploy-frontend
      - 
        cloudfront-update: 
          requires: 
            - smoke-test
      - 
        cleanup: 
          requires: 
            - cloudfront-update
