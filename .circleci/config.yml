version: 2.1

commands:
  destroy-environment:
    description: Destroy backend and frontend cloudformation stacks given a workflow ID.
    parameters:
      WorkflowID:
        type: string  

    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.WorkflowID >>


#aws cloudformation delete-stack --stack-name udapeople-frontend
#aws s3 rb s3://udapeople-123lr --force

  revert-migrations:
    description: Revert the last migration if successfully run in the current workflow.    
    steps:
      - run:
          name: Revert migrations
          command: |
            SUCCESS=$(curl -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/migration)
            if(( $SUCCESS==1 )); 
            then
              cd ~/project/backend
              npm install
              npm run migrations:revert
            fi
          when: on_fail

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Update frontend dependencies 
          command: |
            cd frontend
            npm install
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Update backend dependencies 
          command: |
            cd backend
            npm install
      - run:
          name: Backend build
          command: |
             cd backend
             npm run build
             npm audit fix

      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Test frontend
          command: |
            cd frontend
            npm run test
                
  test-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Test backend
          command: |
            cd backend
            npm run test
            
  scan-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run: 
          name: Update dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Scan frontend
          command: |
            cd frontend
            npm update
            npm audit fix --audit-level=critical --force

  scan-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [build-backend]
      - run:
          name: Analyze backend
          command: |
            cd backend
            npm update
            npm audit fix --audit-level=critical --force

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Ensure backend infrastructure exists
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/backend.yml \
              --tags project=Udapeople \
              --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run: 
          name: Store Backend URL in Memstash
          command: |
            BACKEND_IP=$(aws ec2 describe-instances \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --filters "Name=tag:Name,Values=udapeople-backend-ec2-${CIRCLE_WORKFLOW_ID:0:7}" \
              --output text)
            echo "BACKEND IP:"
            echo ${BACKEND_IP}
            curl -H "Content-Type: text/plain" \
               -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" \
               --request PUT \
               --data ${BACKEND_IP} https://api.memstash.io/values/backendip
      # - run:
      #     name: Ensure frontend infrastructure exist
      #  DEAR MR. Reviewer/Mentor/Sir, 
      #  I have a problem while copying dist folder to the S3 bucket. (Did it manually)
      #  I tried this over 5 times:
      #  aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --recursive
      #  AND:
      #  aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/ --delete
      #  AND:
      #  aws s3 sync dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7}/
      #  I see these error messages (multiple times) everytime I start the operation.
      #  upload failed: dist/cf0ce17ee7c111fc8ae6.js to s3://*********-4c17cf0/cf0ce17ee7c111fc8ae6.js
      #  upload failed: dist/78b6f3fdc892cb3a9fc7.js to s3://*********-4c17cf0/78b6f3fdc892cb3a9fc7.js

      #  So I uploaded the frontend.yml file manually(not within/using the config.yml file), assinged the right bucket,
      #  and all files got transferred without any issues.
          # command: |
          #   aws cloudformation deploy \
          #     --template-file .circleci/files/frontend.yml \
          #     --tags project=Udapeople \
          #     --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
          #     --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  

      - run:
          name: Add backend ip to ansible inventory
          command: |
            yum install tar -y
            yum install gzip -y 
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            cd .circleci/ansible/
            echo "[web]" > ./inventory.txt
            echo ${BACKEND_IP} >> ./inventory.txt
            cat ./inventory.txt

      - persist_to_workspace: 
          root: ~/
          paths:
            - project
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"   

  configure-infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - attach_workspace:
          at: ~/
      - add_ssh_keys: 
          fingerprints: [a7:a2:c1:61:91:19:e8:6e:ab:4e:c6:53:bb:8e:00:d2]
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible
      - run:
          name: Install AWS-CLI
          command: |
            pip install awscli
      - run:
          name: Install OpenSSH
          command: |
            apk add openssh-client
      - run:
          name: Configure server
          no_output_timeout: 20m
          command: |
            pwd
            cd .circleci/ansible/
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}"


  run-migrations:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]

      - run:
          name: Install AWS-CLI
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            npm run migrations > migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            cat migration_${CIRCLE_WORKFLOW_ID:0:7}.txt

      - run:
          name: Send migration results to memstash
          command: |
            cd backend
            cat migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            result=0
            if grep -q "has been executed successfully" migration_${CIRCLE_WORKFLOW_ID:0:7}.txt
            then
              result=1
            fi
            curl -H "Content-Type: text/plain" \
            -H "token: migration_${CIRCLE_WORKFLOW_ID:0:7}" \
            --request PUT \
            --data ${result} https://api.memstash.io/values/migration
            
            echo ${result}
      - destroy-environment:
          WorkflowID: "${CIRCLE_WORKFLOW_ID:0:7}" 
      - revert-migrations     

  deploy-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            sudo apt-get -y -qq update
            sudo apt-get -y -qq install python3
            sudo apt-get -qq install awscli

      - run:
          name: Deploy frontend objects
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            cd frontend
            export API_URL=http://${BACKEND_IP}:3030
            echo "API_URL=$API_URL" >> .env
            echo ${API_URL}
            npm install
            npm run build
            ls -la 
            tar -czvf artifact-"${CIRCLE_WORKFLOW_ID:0:7}".tar.gz dist
            ls -la 
            aws s3 sync dist s3://udapeople-123lr/
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations   
                    
  deploy-backend:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys: 
          fingerprints: [a7:a2:c1:61:91:19:e8:6e:ab:4e:c6:53:bb:8e:00:d2]
      - attach_workspace:
            at: ~/
      - run:
          name: Install dependencies
          command: |
            apk add --update tar gzip ansible nodejs npm curl 
            pip install awscli
      - run:
          name: Install OpenSSH
          command: |
            apk add openssh-client
      - run:
          name: Deploy backend
          no_output_timeout: 25m
          command: |
            echo ENVIROMENT=development > "backend/.env"
            echo TYPEORM_CONNECTION=postgres >> "backend/.env"
            echo TYPEORM_MIGRATIONS_DIR=./src/migrations >> "backend/.env"
            echo TYPEORM_ENTITIES=./src/modules/domain/**/*.entity.ts >> "backend/.env"
            echo TYPEORM_MIGRATIONS=./src/migrations/*.ts >> "backend/.env"
            echo TYPEORM_HOST=$TYPEORM_HOST >> "backend/.env"
            echo TYPEORM_PORT=$TYPEORM_PORT >> "backend/.env"
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> "backend/.env"
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> "backend/.env"
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> "backend/.env"
            cd .circleci/ansible
            ansible-playbook -i inventory.txt deploy-backend.yml
          environment:
            ANSIBLE_HOST_KEY_CHECKING: false
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  smoke-test:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update curl nodejs npm
            pip install awscli

      - run:
          name: Get the URL of Backend and smoke test.
          command: |
            BACKEND_IP=$(curl -H "token: ${CIRCLE_WORKFLOW_ID:0:7}" --request GET https://api.memstash.io/values/backendip)
            echo ${BACKEND_IP}
            curl "http://${BACKEND_IP}:3030/api/status"

      - run:
          name: Frontend smoke test.
          command: |
            if curl -s "http://udapeople-123lr.s3-website-us-west-1.amazonaws.com" | grep "Welcome"
            then
              return 0
            else
              return 1
            fi
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

  cfront-upd-and-clean:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Update CloudFront distribution
          command: |
            # your code here
            OLD_CIRCLE_WORKFLOW_ID=$(aws cloudformation list-exports --query "Exports[?Name=='CircleCI-WorkflowID'].Value" --output text)
            echo OLD_CIRCLE_WORKFLOW_ID=${OLD_CIRCLE_WORKFLOW_ID:0:7}
            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            echo "Update CloudFront"
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --stack-name Udapeople-Cloudfront \
              --region ${AWS_DEFAULT_REGION} \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}"

            STACKS=$(aws cloudformation list-stacks --query "StackSummaries[*].StackName" --stack-status-filter UPDATE_COMPLETE CREATE_COMPLETE --output text)
            echo STACKS=${STACKS}
            if [ -n "${OLD_CIRCLE_WORKFLOW_ID:0:7}" ] && [[ "${STACKS[@]}" =~ "${OLD_CIRCLE_WORKFLOW_ID:0:7}" ]]
            then
              echo "deleting stacks of ${OLD_CIRCLE_WORKFLOW_ID:0:7}"
              aws cloudformation delete-stack --stack-name udapeople-backend-${OLD_CIRCLE_WORKFLOW_ID:0:7}
            fi
      - destroy-environment:
          WorkflowID: ${CIRCLE_WORKFLOW_ID:0:7}
      - revert-migrations

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
      #- deploy-infrastructure:
      #    requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      #    filters:
      #      branches:
      #        only: [master]
      #- configure-infrastructure:
      #    requires: [deploy-infrastructure]
      #- run-migrations:
      #    requires: [configure-infrastructure]
      #- deploy-frontend:
      #    requires: [run-migrations]
      #- deploy-backend:
      #    requires: [run-migrations]
      #- smoke-test:
      #   requires: [deploy-backend, deploy-frontend]
      #- cfront-upd-and-clean:
      #    requires: [smoke-test]
